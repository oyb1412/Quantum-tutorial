// <auto-generated>
// This code was auto-generated by a tool, every time
// the tool executes this code will be reset.
//
// If you need to extend the classes generated to add
// fields or methods to them, please create partial
// declarations in another file.
// </auto-generated>
#pragma warning disable 0109
#pragma warning disable 1591


namespace Quantum.Prototypes {
  using Photon.Deterministic;
  using Quantum;
  using Quantum.Core;
  using Quantum.Collections;
  using Quantum.Inspector;
  using Quantum.Physics2D;
  using Quantum.Physics3D;
  using Byte = System.Byte;
  using SByte = System.SByte;
  using Int16 = System.Int16;
  using UInt16 = System.UInt16;
  using Int32 = System.Int32;
  using UInt32 = System.UInt32;
  using Int64 = System.Int64;
  using UInt64 = System.UInt64;
  using Boolean = System.Boolean;
  using String = System.String;
  using Object = System.Object;
  using FlagsAttribute = System.FlagsAttribute;
  using SerializableAttribute = System.SerializableAttribute;
  using MethodImplAttribute = System.Runtime.CompilerServices.MethodImplAttribute;
  using MethodImplOptions = System.Runtime.CompilerServices.MethodImplOptions;
  using FieldOffsetAttribute = System.Runtime.InteropServices.FieldOffsetAttribute;
  using StructLayoutAttribute = System.Runtime.InteropServices.StructLayoutAttribute;
  using LayoutKind = System.Runtime.InteropServices.LayoutKind;
  #if QUANTUM_UNITY //;
  using TooltipAttribute = UnityEngine.TooltipAttribute;
  using HeaderAttribute = UnityEngine.HeaderAttribute;
  using SpaceAttribute = UnityEngine.SpaceAttribute;
  using RangeAttribute = UnityEngine.RangeAttribute;
  using HideInInspectorAttribute = UnityEngine.HideInInspector;
  using PreserveAttribute = UnityEngine.Scripting.PreserveAttribute;
  using FormerlySerializedAsAttribute = UnityEngine.Serialization.FormerlySerializedAsAttribute;
  using MovedFromAttribute = UnityEngine.Scripting.APIUpdating.MovedFromAttribute;
  using CreateAssetMenu = UnityEngine.CreateAssetMenuAttribute;
  using RuntimeInitializeOnLoadMethodAttribute = UnityEngine.RuntimeInitializeOnLoadMethodAttribute;
  #endif //;
  
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.BoundLifeTimeComponent))]
  public unsafe partial class BoundLifeTimeComponentPrototype : ComponentPrototype<Quantum.BoundLifeTimeComponent> {
    public FP DestroyTime;
    partial void MaterializeUser(Frame frame, ref Quantum.BoundLifeTimeComponent result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.BoundLifeTimeComponent component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.BoundLifeTimeComponent result, in PrototypeMaterializationContext context = default) {
        result.DestroyTime = this.DestroyTime;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.EnemyBoundComponent))]
  public unsafe partial class EnemyBoundComponentPrototype : ComponentPrototype<Quantum.EnemyBoundComponent> {
    [HideInInspector()]
    public Int32 _empty_prototype_dummy_field_;
    partial void MaterializeUser(Frame frame, ref Quantum.EnemyBoundComponent result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.EnemyBoundComponent component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.EnemyBoundComponent result, in PrototypeMaterializationContext context = default) {
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.EnemyComponent))]
  public unsafe class EnemyComponentPrototype : ComponentPrototype<Quantum.EnemyComponent> {
    public AssetRef<EntityPrototype> AttackBoundPrototype;
    public FP EnemyMoveSpeed;
    public Int32 CurrentEnemyHp;
    public Int32 MaxEnemyHp;
    public FP EnemyAttackSpeed;
    public FP EnemyAttackTimer;
    public FP EnemySpawnDistanceToCenter;
    public FPVector2 ClosestPlayerPos;
    public FPVector2 Direction;
    public Quantum.QEnum32<EnemyState> State;
    public MapEntityId PlayerEntity;
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.EnemyComponent component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.EnemyComponent result, in PrototypeMaterializationContext context = default) {
        result.AttackBoundPrototype = this.AttackBoundPrototype;
        result.EnemyMoveSpeed = this.EnemyMoveSpeed;
        result.CurrentEnemyHp = this.CurrentEnemyHp;
        result.MaxEnemyHp = this.MaxEnemyHp;
        result.EnemyAttackSpeed = this.EnemyAttackSpeed;
        result.EnemyAttackTimer = this.EnemyAttackTimer;
        result.EnemySpawnDistanceToCenter = this.EnemySpawnDistanceToCenter;
        result.ClosestPlayerPos = this.ClosestPlayerPos;
        result.Direction = this.Direction;
        result.State = this.State;
        PrototypeValidator.FindMapEntity(this.PlayerEntity, in context, out result.PlayerEntity);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.EnemysEnemy))]
  public unsafe partial class EnemysEnemyPrototype : ComponentPrototype<Quantum.EnemysEnemy> {
    public AssetRef<EntityPrototype> ChildAsteroid;
    partial void MaterializeUser(Frame frame, ref Quantum.EnemysEnemy result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.EnemysEnemy component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.EnemysEnemy result, in PrototypeMaterializationContext context = default) {
        result.ChildAsteroid = this.ChildAsteroid;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.Input))]
  public unsafe partial class InputPrototype : StructPrototype {
    public Button Left;
    public Button Right;
    public Button Up;
    public Button Down;
    public Button Attack;
    partial void MaterializeUser(Frame frame, ref Quantum.Input result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref Quantum.Input result, in PrototypeMaterializationContext context = default) {
        result.Left = this.Left;
        result.Right = this.Right;
        result.Up = this.Up;
        result.Down = this.Down;
        result.Attack = this.Attack;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.Player))]
  public unsafe partial class PlayerPrototype : ComponentPrototype<Quantum.Player> {
    public AssetRef<PlayerConfig> MyPlayerConfig;
    public FP FireInterval;
    partial void MaterializeUser(Frame frame, ref Quantum.Player result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.Player component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.Player result, in PrototypeMaterializationContext context = default) {
        result.MyPlayerConfig = this.MyPlayerConfig;
        result.FireInterval = this.FireInterval;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.PlayerBoundComponent))]
  public unsafe class PlayerBoundComponentPrototype : ComponentPrototype<Quantum.PlayerBoundComponent> {
    public MapEntityId OwnerPlayer;
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.PlayerBoundComponent component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.PlayerBoundComponent result, in PrototypeMaterializationContext context = default) {
        PrototypeValidator.FindMapEntity(this.OwnerPlayer, in context, out result.OwnerPlayer);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.PlayerComponent))]
  public unsafe partial class PlayerComponentPrototype : ComponentPrototype<Quantum.PlayerComponent> {
    public AssetRef<EntityPrototype> AttackBoundPrototype;
    public PlayerRef PlayerRef;
    public FP PlayerMoveSpeed;
    public Int32 KillCount;
    public Int32 CurrentPlayerHp;
    public Int32 MaxPlayerHp;
    public FP PlayerAttackSpeed;
    public FP PlayerAttackTimer;
    public FPVector2 PlayerDirection;
    public FPVector2 PlayerLastDirection;
    partial void MaterializeUser(Frame frame, ref Quantum.PlayerComponent result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.PlayerComponent component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.PlayerComponent result, in PrototypeMaterializationContext context = default) {
        result.AttackBoundPrototype = this.AttackBoundPrototype;
        result.PlayerRef = this.PlayerRef;
        result.PlayerMoveSpeed = this.PlayerMoveSpeed;
        result.KillCount = this.KillCount;
        result.CurrentPlayerHp = this.CurrentPlayerHp;
        result.MaxPlayerHp = this.MaxPlayerHp;
        result.PlayerAttackSpeed = this.PlayerAttackSpeed;
        result.PlayerAttackTimer = this.PlayerAttackTimer;
        result.PlayerDirection = this.PlayerDirection;
        result.PlayerLastDirection = this.PlayerLastDirection;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.PlayerLink))]
  public unsafe partial class PlayerLinkPrototype : ComponentPrototype<Quantum.PlayerLink> {
    public PlayerRef PlayerRef;
    partial void MaterializeUser(Frame frame, ref Quantum.PlayerLink result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.PlayerLink component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.PlayerLink result, in PrototypeMaterializationContext context = default) {
        result.PlayerRef = this.PlayerRef;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.PlayerProjectile))]
  public unsafe class PlayerProjectilePrototype : ComponentPrototype<Quantum.PlayerProjectile> {
    public FP TTL;
    public MapEntityId Owner;
    public AssetRef<PlayerProjectileConfig> ProjectileConfig;
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.PlayerProjectile component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.PlayerProjectile result, in PrototypeMaterializationContext context = default) {
        result.TTL = this.TTL;
        PrototypeValidator.FindMapEntity(this.Owner, in context, out result.Owner);
        result.ProjectileConfig = this.ProjectileConfig;
    }
  }
}
#pragma warning restore 0109
#pragma warning restore 1591
