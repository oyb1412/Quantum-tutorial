<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Quantum.Log</name>
    </assembly>
    <members>
        <member name="T:Quantum.Log">
            <summary>
            Quantum's logging system.
            </summary>
            <summary>
            Global logging class. Needs to be initialized before use. When in Unity, "QuantumLogInitializer" takes care of that.
            All static methods have conditional compilation directives:
            <list type="bullet">
            <item><c>QUANTUM_LOGLEVEL_DEBUG</c> enables <c>"Debug"</c> methods</item>
            <item><c>QUANTUM_LOGLEVEL_INFO</c> enables all the above and <c>Info</c> methods</item>
            <item><c>QUANTUM_LOGLEVEL_WARN</c> enables all the above and <c>Warn</c> methods</item>
            <item><c>QUANTUM_LOGLEVEL_ERROR</c> enables all the above and <c>Error</c> methods</item>
            </list>
            Trace channels are enabled separately with <c>QUANTUM_TRACE_*</c> directives.
            </summary>
        </member>
        <member name="M:Quantum.Log.Trace(System.Object)">
            <summary>Logs a message if TRACE is defined.</summary>
            <param name="msg">The message to log.</param>
        </member>
        <member name="M:Quantum.Log.TraceWarn(System.Object)">
            <summary>Logs a warning if TRACE is defined.</summary>
            <param name="msg">The message to log.</param>
        </member>
        <member name="M:Quantum.Log.TraceError(System.Object)">
            <summary>Logs an error if TRACE is defined.</summary>
            <param name="msg">The message to log.</param>
        </member>
        <member name="M:Quantum.Log.Debug(System.Object)">
            <summary>Logs a message if DEBUG is defined.</summary>
            <param name="msg">The message to log.</param>
        </member>
        <member name="M:Quantum.Log.DebugWarn(System.Object)">
            <summary>Logs a warning if DEBUG is defined.</summary>
            <param name="msg">The message to log.</param>
        </member>
        <member name="M:Quantum.Log.DebugError(System.Object)">
            <summary>Logs an error if DEBUG is defined.</summary>
            <param name="msg">The message to log.</param>
        </member>
        <member name="M:Quantum.Log.Info(System.Object)">
            <summary>Logs a message of Info type.</summary>
            <param name="msg">The message to log.</param>
        </member>
        <member name="M:Quantum.Log.Warn(System.Object)">
            <summary>Logs a message of Warn type.</summary>
            <param name="msg">The message to log.</param>
        </member>
        <member name="M:Quantum.Log.Error(System.Object)">
            <summary>Logs a message of Error type.</summary>
            <param name="msg">The message to log.</param>
        </member>
        <member name="M:Quantum.Log.Trace(System.String)">
            <summary>Enabled by <c>QUANTUM_TRACE_GLOBAL</c></summary>
        </member>
        <member name="M:Quantum.Log.TraceWarn(System.String)">
            <summary>Enabled by <c>QUANTUM_TRACE_GLOBAL</c></summary>
        </member>
        <member name="M:Quantum.Log.TraceError(System.String)">
            <summary>Enabled by <c>QUANTUM_TRACE_GLOBAL</c></summary>
        </member>
        <member name="M:Quantum.Log.Trace``1(``0,System.String)">
            <summary>Enabled by <c>QUANTUM_TRACE_GLOBAL</c></summary>
        </member>
        <member name="M:Quantum.Log.TraceWarn``1(``0,System.String)">
            <summary>Enabled by <c>QUANTUM_TRACE_GLOBAL</c></summary>
        </member>
        <member name="M:Quantum.Log.TraceError``1(``0,System.String)">
            <summary>Enabled by <c>QUANTUM_TRACE_GLOBAL</c></summary>
        </member>
        <member name="M:Quantum.Log.TraceAssets(System.String)">
            <summary>Enabled by <c>QUANTUM_TRACE_ASSETS</c></summary>
        </member>
        <member name="M:Quantum.Log.TraceAssetsWarn(System.String)">
            <summary>Enabled by <c>QUANTUM_TRACE_ASSETS</c></summary>
        </member>
        <member name="M:Quantum.Log.TraceAssetsError(System.String)">
            <summary>Enabled by <c>QUANTUM_TRACE_ASSETS</c></summary>
        </member>
        <member name="M:Quantum.Log.TraceAssets``1(``0,System.String)">
            <summary>Enabled by <c>QUANTUM_TRACE_ASSETS</c></summary>
        </member>
        <member name="M:Quantum.Log.TraceAssetsWarn``1(``0,System.String)">
            <summary>Enabled by <c>QUANTUM_TRACE_ASSETS</c></summary>
        </member>
        <member name="M:Quantum.Log.TraceAssetsError``1(``0,System.String)">
            <summary>Enabled by <c>QUANTUM_TRACE_ASSETS</c></summary>
        </member>
        <member name="M:Quantum.Log.Dispose">
            <summary>
            Uninitializes the logger. All log streams are disposed.
            </summary>
        </member>
        <member name="T:Quantum.Log.CreateLogStreamDelegate">
            <summary>
            A delegate to create a log stream.
            </summary>
        </member>
        <member name="P:Quantum.Log.IsInitialized">
            <summary>
            Whether the logger is initialized.
            </summary>
        </member>
        <member name="P:Quantum.Log.Settings">
            <summary>
            Current log settings.
            </summary>
        </member>
        <member name="M:Quantum.Log.Initialize(Quantum.LogLevel,Quantum.Log.CreateLogStreamDelegate,Quantum.TraceChannels)">
            <summary>
            Initializes the logger with the specified log level and trace channels.
            </summary>
            <param name="logLevel">The minimal log level. All messages with lower level are not going to be reported, regardless
            of <c>QUANTUM_LOGLEVEL</c> defines.</param>
            <param name="traceChannels">Trace channels to activate. Trace channels not included will not get reported, regardless
            of <c>QUANTUM_TRACE</c> defines.</param>
            <param name="streamFactory"></param>
        </member>
        <member name="M:Quantum.Log.Initialize(Quantum.LogSettings,Quantum.Log.CreateLogStreamDelegate)">
            <summary>
            <see cref="M:Quantum.Log.Initialize(Quantum.LogLevel,Quantum.Log.CreateLogStreamDelegate,Quantum.TraceChannels)"/>
            </summary>
        </member>
        <member name="M:Quantum.Log.InitializeForConsole(Quantum.LogSettings)">
            <summary>
            Initializes the logger to log to the console.
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:Quantum.Log.InitializeForConsole(Quantum.LogLevel,Quantum.TraceChannels)">
            <summary>
            Initializes the logger to log to the console.
            </summary>
        </member>
        <member name="M:Quantum.Log.Debug(System.String)">
            <summary>Logs a debug message. <c>DEBUG</c> needs to be defined and at least <see cref="F:Quantum.LogLevel.Debug"/> must have been used to initialize the logger.</summary>
        </member>
        <member name="M:Quantum.Log.DebugWarn(System.String)">
            <summary>Logs a debug warning message. <c>DEBUG</c>needs to be defined and at least <see cref="F:Quantum.LogLevel.Debug"/> must have been used to initialize the logger.</summary>
        </member>
        <member name="M:Quantum.Log.DebugError(System.String)">
            <summary>Logs a debug error message. <c>DEBUG</c> needs to be defined and at least <see cref="F:Quantum.LogLevel.Debug"/> must have been used to initialize the logger.</summary>
        </member>
        <member name="M:Quantum.Log.Info(System.String)">
            <summary>Logs a message. <c>DEBUG</c> needs to be defined and at least <see cref="F:Quantum.LogLevel.Info"/> must have been used to initialize the logger.</summary>
        </member>
        <member name="M:Quantum.Log.Info(Quantum.ILogSource,System.String)">
            <summary>Logs a message. At least <see cref="F:Quantum.LogLevel.Info"/> must have been used to initialize the logger.</summary>
        </member>
        <member name="M:Quantum.Log.Warn(System.String)">
            <summary>Logs a warning message. At least <see cref="F:Quantum.LogLevel.Warn"/> must have been used to initialize the logger.</summary>
        </member>
        <member name="M:Quantum.Log.Warn(Quantum.ILogSource,System.String)">
            <summary>Logs a warning message. At least <see cref="F:Quantum.LogLevel.Warn"/> must have been used to initialize the logger.</summary>
        </member>
        <member name="M:Quantum.Log.Error(System.String)">
            <summary>Logs an error message. At least <see cref="F:Quantum.LogLevel.Error"/> must have been used to initialize the logger.</summary>
        </member>
        <member name="M:Quantum.Log.Error(Quantum.ILogSource,System.String)">
            <summary>Logs an error message. At least <see cref="F:Quantum.LogLevel.Error"/> must have been used to initialize the logger.</summary>
        </member>
        <member name="M:Quantum.Log.Exception(System.Exception)">
            <summary>Logs an exception message. At least <see cref="F:Quantum.LogLevel.Error"/> must have been used to initialize the logger.</summary>
        </member>
        <member name="M:Quantum.Log.Exception(System.String,System.Exception)">
            <summary>Logs an exception message. At least <see cref="F:Quantum.LogLevel.Error"/> must have been used to initialize the logger.</summary>
        </member>
        <member name="M:Quantum.Log.Exception(Quantum.ILogSource,System.String,System.Exception)">
            <summary>Logs an exception message. At least <see cref="F:Quantum.LogLevel.Error"/> must have been used to initialize the logger.</summary>
        </member>
        <member name="P:Quantum.Log.Initialized">
            <summary>
            Use <see cref="P:Quantum.Log.IsInitialized"/> instead.
            </summary>
        </member>
        <member name="M:Quantum.Log.InitForConsole">
            <summary>
            Use <see cref="M:Quantum.Log.InitializeForConsole(Quantum.LogSettings)"/> instead.
            </summary>
        </member>
        <member name="M:Quantum.Log.InitForConsole(Quantum.LogType)">
            <summary>
            Use <see cref="M:Quantum.Log.InitializeForConsole(Quantum.LogSettings)"/> instead.
            </summary>
        </member>
        <member name="M:Quantum.Log.Init(System.Action{System.String},System.Action{System.String},System.Action{System.String},System.Action{System.Exception})">
            <summary>
            Use <see cref="M:Quantum.Log.Initialize(Quantum.LogLevel,Quantum.Log.CreateLogStreamDelegate,Quantum.TraceChannels)"/> instead.
            </summary>
        </member>
        <member name="T:Quantum.LogContext">
            <summary>
            Additional info about the log context.
            </summary>
        </member>
        <member name="F:Quantum.LogContext.Prefix">
            <summary>
            A prefix for the log message.
            </summary>
        </member>
        <member name="F:Quantum.LogContext.Source">
            <summary>
            An object that is the source of the log message.
            </summary>
        </member>
        <member name="M:Quantum.LogContext.#ctor(System.String,System.Object)">
            <summary>
            Creates a new log context.
            </summary>
            <param name="prefix">Log message prefix</param>
            <param name="source">An object that is the source of the log message</param>
        </member>
        <member name="T:Quantum.TextWriterLogger">
            <summary>
            Not used anymore.
            </summary>
        </member>
        <member name="M:Quantum.TextWriterLogger.Dispose">
            <summary>
            Not used anymore.
            </summary>
        </member>
        <member name="M:Quantum.TextWriterLogger.Log(Quantum.LogType,System.String,Quantum.LogContext@)">
            <summary>
            Not used anymore.
            </summary>
        </member>
        <member name="M:Quantum.TextWriterLogger.LogException(System.Exception,Quantum.LogContext@)">
            <summary>
            Not used anymore.
            </summary>
        </member>
        <member name="T:Quantum.ConsoleLogger">
            <summary>
            Not used anymore.
            </summary>
        </member>
        <member name="T:Quantum.ILogger">
            <summary>
            Represents a logger.
            </summary>
        </member>
        <member name="M:Quantum.ILogger.Log(Quantum.LogType,System.String,Quantum.LogContext@)">
            <summary>
            Logs a message.
            </summary>
            <param name="logType">Log type</param>
            <param name="message">Message</param>
            <param name="logContext">Additional info about the log context</param>
        </member>
        <member name="M:Quantum.ILogger.LogException(System.Exception,Quantum.LogContext@)">
            <summary>
            Logs an exception.
            </summary>
            <param name="ex">An exception</param>
            <param name="logContext">Additional info about the log context</param>
        </member>
        <member name="T:Quantum.TraceChannels">
            <summary>Trace channels</summary>
        </member>
        <member name="F:Quantum.TraceChannels.Global">
            <summary>Global</summary>
        </member>
        <member name="F:Quantum.TraceChannels.Physics2D">
            <summary>Physics2D</summary>
        </member>
        <member name="F:Quantum.TraceChannels.Physics3D">
            <summary>Physics3D</summary>
        </member>
        <member name="F:Quantum.TraceChannels.Assets">
            <summary>Assets</summary>
        </member>
        <member name="F:Quantum.TraceChannels.Memory">
            <summary>Memory</summary>
        </member>
        <member name="F:Quantum.TraceChannels.Input">
            <summary>Input</summary>
        </member>
        <member name="T:Quantum.InternalLogStreams">
            <summary>
            Provides static log streams for different log levels.
            </summary>
        </member>
        <member name="F:Quantum.InternalLogStreams.LogTrace">
            <summary> Global trace stream </summary>
        </member>
        <member name="F:Quantum.InternalLogStreams.LogTracePhysics2D">
            <summary> Physics2D trace stream </summary>
        </member>
        <member name="F:Quantum.InternalLogStreams.LogTracePhysics3D">
            <summary> Physics3D trace stream </summary>
        </member>
        <member name="F:Quantum.InternalLogStreams.LogTraceAssets">
            <summary> Assets trace stream </summary>
        </member>
        <member name="F:Quantum.InternalLogStreams.LogTraceMemory">
            <summary> Memory trace stream </summary>
        </member>
        <member name="F:Quantum.InternalLogStreams.LogTraceInput">
            <summary> Input trace stream </summary>
        </member>
        <member name="F:Quantum.InternalLogStreams.LogDebugPhysics2D">
            <summary> Physics2D debug stream </summary>
        </member>
        <member name="F:Quantum.InternalLogStreams.LogDebugPhysics3D">
            <summary> Physics3D debug stream </summary>
        </member>
        <member name="F:Quantum.InternalLogStreams.LogDebug">
            <summary>Debug log stream.</summary>
        </member>
        <member name="F:Quantum.InternalLogStreams.LogInfo">
            <summary>Info log stream.</summary>
        </member>
        <member name="F:Quantum.InternalLogStreams.LogWarn">
            <summary>Warning log stream.</summary>
        </member>
        <member name="F:Quantum.InternalLogStreams.LogError">
            <summary>Error log stream.</summary>
        </member>
        <member name="F:Quantum.InternalLogStreams.LogException">
            <summary>Exception log stream.</summary>
        </member>
        <member name="T:Quantum.AssertException">
            <summary>
            An exception that is thrown when an assertion fails.
            </summary>
        </member>
        <member name="M:Quantum.AssertException.#ctor">
            <summary>
            Creates a new instance of the exception.
            </summary>
        </member>
        <member name="M:Quantum.AssertException.#ctor(System.String)">
            <summary>
            Creates a new instance of the exception with a message.
            </summary>
            <param name="msg">A message</param>
        </member>
        <member name="T:Quantum.Assert">
            <summary>
            Provides methods for asserting conditions. Throws an AssertException when a condition is not met. Methods are only invoked in DEBUG builds unless otherwise specified.
            </summary>
        </member>
        <member name="M:Quantum.Assert.Fail">
            <summary>
            Always throws an AssertException.
            </summary>
            <exception cref="T:Quantum.AssertException"></exception>
        </member>
        <member name="M:Quantum.Assert.Fail(System.String)">
            <summary>
            Always throws an AssertException with a message.
            </summary>
            <param name="error">An error message</param>
            <exception cref="T:Quantum.AssertException"></exception>
        </member>
        <member name="M:Quantum.Assert.Fail(System.String,System.Object[])">
            <summary>
            Always throws an AssertException with a message.
            </summary>
            <param name="format">An error message format</param>
            <param name="args"></param>
            <exception cref="T:Quantum.AssertException"></exception>
        </member>
        <member name="M:Quantum.Assert.Check(System.Object)">
            <summary>
            Throws an AssertException if the <paramref name="condition"/> is <c>null</c>
            </summary>
            <param name="condition">Value to check</param>
            <exception cref="T:Quantum.AssertException"></exception>
        </member>
        <member name="M:Quantum.Assert.Check(System.Void*)">
            <summary>
            Throws an AssertException if the <paramref name="condition"/> is <c>null</c>
            </summary>
            <param name="condition">Value to check</param>
            <exception cref="T:Quantum.AssertException"></exception>
        </member>
        <member name="M:Quantum.Assert.Check(System.Boolean)">
            <summary>
            Throws an AssertException if the <paramref name="condition"/> is <see langword="false"/>
            </summary>
            <param name="condition">Value to check</param>
            <exception cref="T:Quantum.AssertException"></exception>
        </member>
        <member name="M:Quantum.Assert.Check(System.Boolean,System.String)">
            <summary>
            Throws an AssertException with a message if the <paramref name="condition"/> is <see langword="false"/>
            </summary>
            <param name="condition">Value to check</param>
            <param name="error">An error message</param>
            <exception cref="T:Quantum.AssertException"></exception>
        </member>
        <member name="M:Quantum.Assert.Check``1(System.Boolean,System.String,``0)">
            <summary>
            Throws an AssertException with a message if the <paramref name="condition"/> is <see langword="false"/>
            </summary>
            <param name="condition">Value to check</param>
            <param name="format">An error message format</param>
            <exception cref="T:Quantum.AssertException"></exception>
        </member>
        <member name="M:Quantum.Assert.Check``2(System.Boolean,System.String,``0,``1)">
            <summary>
            Throws an AssertException with a message if the <paramref name="condition"/> is <see langword="false"/>
            </summary>
            <param name="condition">Value to check</param>
            <param name="format">An error message format</param>
            <exception cref="T:Quantum.AssertException"></exception>
        </member>
        <member name="M:Quantum.Assert.Check``3(System.Boolean,System.String,``0,``1,``2)">
            <summary>
            Throws an AssertException with a message if the <paramref name="condition"/> is <see langword="false"/>
            </summary>
            <param name="condition">Value to check</param>
            <param name="format">An error message format</param>
            <exception cref="T:Quantum.AssertException"></exception>
        </member>
        <member name="M:Quantum.Assert.Check``4(System.Boolean,System.String,``0,``1,``2,``3)">
            <summary>
            Throws an AssertException with a message if the <paramref name="condition"/> is <see langword="false"/>
            </summary>
            <param name="condition">Value to check</param>
            <param name="format">An error message format</param>
            <exception cref="T:Quantum.AssertException"></exception>
        </member>
        <member name="M:Quantum.Assert.Check``1(System.Boolean,``0)">
            <summary>
            Throws an AssertException with a message if the <paramref name="condition"/> is <see langword="false"/>. The message is composed from additional arguments.
            </summary>
            <typeparam name="T0"></typeparam>
            <param name="condition">Value to check</param>
            <exception cref="T:Quantum.AssertException"></exception>
        </member>
        <member name="M:Quantum.Assert.Check``2(System.Boolean,``0,``1)">
            <summary>
            Throws an AssertException with a message if the <paramref name="condition"/> is <see langword="false"/>. The message is composed from additional arguments.
            </summary>
            <param name="condition">Value to check</param>
            <exception cref="T:Quantum.AssertException"></exception>
        </member>
        <member name="M:Quantum.Assert.Check``3(System.Boolean,``0,``1,``2)">
            <summary>
            Throws an AssertException with a message if the <paramref name="condition"/> is <see langword="false"/>. The message is composed from additional arguments.
            </summary>
            <param name="condition">Value to check</param>
            <exception cref="T:Quantum.AssertException"></exception>
        </member>
        <member name="M:Quantum.Assert.Check``4(System.Boolean,``0,``1,``2,``3)">
            <summary>
            Throws an AssertException with a message if the <paramref name="condition"/> is <see langword="false"/>. The message is composed from additional arguments.
            </summary>
            <param name="condition">Value to check</param>
            <exception cref="T:Quantum.AssertException"></exception>
        </member>
        <member name="M:Quantum.Assert.Check``5(System.Boolean,``0,``1,``2,``3,``4)">
            <summary>
            Throws an AssertException with a message if the <paramref name="condition"/> is <see langword="false"/>. The message is composed from additional arguments.
            </summary>
            <param name="condition">Value to check</param>
            <exception cref="T:Quantum.AssertException"></exception>
        </member>
        <member name="M:Quantum.Assert.AlwaysFail">
            <summary>
            Throws an AssertException, even in non-DEBUG builds.
            </summary>
        </member>
        <member name="M:Quantum.Assert.AlwaysFail(System.String)">
            <summary>
            Throws an AssertException with a message, even in non-DEBUG builds.
            </summary>
            <param name="error">An error message</param>
            <exception cref="T:Quantum.AssertException"></exception>
        </member>
        <member name="M:Quantum.Assert.AlwaysFail(System.Object)">
            <summary>
            Throws an AssertException with a message, even in non-DEBUG builds.
            </summary>
            <param name="error">An error message</param>
            <exception cref="T:Quantum.AssertException"></exception>
        </member>
        <member name="M:Quantum.Assert.AlwaysFail``1(``0)">
            <summary>
            Throws an AssertException with a message, even in non-DEBUG builds.
            </summary>
            <param name="error">An error message</param>
            <exception cref="T:Quantum.AssertException"></exception>
        </member>
        <member name="M:Quantum.Assert.Always(System.Boolean)">
            <summary>
            Throws an AssertException with a message if the <paramref name="condition"/> is <see langword="false"/>, even in non-DEBUG builds.
            </summary>
            <param name="condition">Value to check</param>
            <exception cref="T:Quantum.AssertException"></exception>
        </member>
        <member name="M:Quantum.Assert.Always(System.Boolean,System.String)">
            <summary>
            Throws an AssertException with a message if <paramref name="condition"/> is <see langword="false"/>, even in non-DEBUG builds.
            </summary>
            <param name="condition">Value to check</param>
            <param name="error">An error message</param>
            <exception cref="T:Quantum.AssertException"></exception>
        </member>
        <member name="M:Quantum.Assert.Always``1(System.Boolean,System.String,``0)">
            <summary>
            Throws an AssertException with a message if <paramref name="condition"/> is <see langword="false"/>, even in non-DEBUG builds.
            </summary>
            <param name="condition">Value to check</param>
            <param name="format">An error message format</param>
            <exception cref="T:Quantum.AssertException"></exception>
        </member>
        <member name="M:Quantum.Assert.Always``2(System.Boolean,System.String,``0,``1)">
            <summary>
            Throws an AssertException with a message if <paramref name="condition"/> is <see langword="false"/>, even in non-DEBUG builds.
            </summary>
            <param name="condition">Value to check</param>
            <param name="format">An error message format</param>
            <exception cref="T:Quantum.AssertException"></exception>
        </member>
        <member name="M:Quantum.Assert.Always``3(System.Boolean,System.String,``0,``1,``2)">
            <summary>
            Throws an AssertException with a message if <paramref name="condition"/> is <see langword="false"/>, even in non-DEBUG builds.
            </summary>
            <param name="condition">Value to check</param>
            <param name="format">An error message format</param>
            <exception cref="T:Quantum.AssertException"></exception>
        </member>
        <member name="M:Quantum.Assert.Always``4(System.Boolean,System.String,``0,``1,``2,``3)">
            <summary>
            Throws an AssertException with a message if <paramref name="condition"/> is <see langword="false"/>, even in non-DEBUG builds.
            </summary>
            <param name="condition">Value to check</param>
            <param name="format">An error message format</param>
            <exception cref="T:Quantum.AssertException"></exception>
        </member>
        <member name="M:Quantum.Assert.Always``1(System.Boolean,``0)">
            <summary>
            Throws an AssertException with a message if the <paramref name="condition"/> is <see langword="false"/>, even in non-DEBUG builds. The message is composed from additional arguments.
            </summary>
            <param name="condition">Value to check</param>
            <exception cref="T:Quantum.AssertException"></exception>
        </member>
        <member name="M:Quantum.Assert.Always``2(System.Boolean,``0,``1)">
            <summary>
            Throws an AssertException with a message if the <paramref name="condition"/> is <see langword="false"/>, even in non-DEBUG builds. The message is composed from additional arguments.
            </summary>
            <param name="condition">Value to check</param>
            <exception cref="T:Quantum.AssertException"></exception>
        </member>
        <member name="M:Quantum.Assert.Always``3(System.Boolean,``0,``1,``2)">
            <summary>
            Throws an AssertException with a message if the <paramref name="condition"/> is <see langword="false"/>, even in non-DEBUG builds. The message is composed from additional arguments.
            </summary>
            <param name="condition">Value to check</param>
            <exception cref="T:Quantum.AssertException"></exception>
        </member>
        <member name="M:Quantum.Assert.Always``4(System.Boolean,``0,``1,``2,``3)">
            <summary>
            Throws an AssertException with a message if the <paramref name="condition"/> is <see langword="false"/>, even in non-DEBUG builds. The message is composed from additional arguments.
            </summary>
            <param name="condition">Value to check</param>
            <exception cref="T:Quantum.AssertException"></exception>
        </member>
        <member name="M:Quantum.Assert.Log(System.Boolean,System.String)">
            <summary>
            Logs an assertion if the <paramref name="condition"/> is <see langword="false"/>. For Unity builds, log goes straight to UnityEngine.Debug. Otherwise, log goes to LogError stream.
            </summary>
            <param name="condition">Value to check</param>
            <param name="message"></param>
        </member>
        <member name="M:Quantum.Assert.Log``1(System.Boolean,System.String,``0)">
            <summary>
            Logs an assertion if the <paramref name="condition"/> is <see langword="false"/>. For Unity builds, log goes straight to UnityEngine.Debug. Otherwise, log goes to LogError stream.
            </summary>
            <param name="condition">Value to check</param>
            <param name="format"></param>
        </member>
        <member name="M:Quantum.Assert.Log``2(System.Boolean,System.String,``0,``1)">
            <summary>
            Logs an assertion if the <paramref name="condition"/> is <see langword="false"/>. For Unity builds, log goes straight to UnityEngine.Debug. Otherwise, log goes to LogError stream.
            </summary>
            <param name="condition">Value to check</param>
            <param name="format"></param>
        </member>
        <member name="M:Quantum.Assert.Log``3(System.Boolean,System.String,``0,``1,``2)">
            <summary>
            Logs an assertion if the <paramref name="condition"/> is <see langword="false"/>. For Unity builds, log goes straight to UnityEngine.Debug. Otherwise, log goes to LogError stream.
            </summary>
            <param name="condition">Value to check</param>
            <param name="format"></param>
        </member>
        <member name="M:Quantum.Assert.Log``4(System.Boolean,System.String,``0,``1,``2,``3)">
            <summary>
            Logs an assertion if the <paramref name="condition"/> is <see langword="false"/>. For Unity builds, log goes straight to UnityEngine.Debug. Otherwise, log goes to LogError stream.
            </summary>
            <param name="condition">Value to check</param>
            <param name="format"></param>
        </member>
        <member name="T:Quantum.ConsoleLogStream">
            <summary>
            A log stream that writes log messages to the console with a specified color.
            </summary>
        </member>
        <member name="M:Quantum.ConsoleLogStream.#ctor(System.ConsoleColor,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Quantum.ConsoleLogStream"/> class.
            </summary>
            <param name="color">The console color to use for log messages.</param>
            <param name="prefix">An optional prefix to prepend to each log message.</param>
        </member>
        <member name="M:Quantum.ConsoleLogStream.Log(Quantum.ILogSource,System.String)">
            <summary>
            Logs a message with a source.
            </summary>
            <param name="source">The source of the log message.</param>
            <param name="message">The log message.</param>
        </member>
        <member name="M:Quantum.ConsoleLogStream.Log(Quantum.ILogSource,System.String,System.Exception)">
            <summary>
            Logs a message with a source and an exception.
            </summary>
            <param name="source">The source of the log message.</param>
            <param name="message">The log message.</param>
            <param name="error">The exception to log.</param>
        </member>
        <member name="T:Quantum.DebugLogStream">
            <summary>
            Represents a debug log stream that supports logging to different streams.
            </summary>
        </member>
        <member name="F:Quantum.DebugLogStream.InfoStream">
            <summary>Stream for logging informational messages.</summary>
        </member>
        <member name="F:Quantum.DebugLogStream.WarnStream">
            <summary>Stream for logging warning messages.</summary>
        </member>
        <member name="F:Quantum.DebugLogStream.ErrorStream">
            <summary>Stream for logging error messages.</summary>
        </member>
        <member name="M:Quantum.DebugLogStream.#ctor(Quantum.LogStream,Quantum.LogStream,Quantum.LogStream)">
            <summary>
            Initializes a new instance of the DebugLogStream class.
            </summary>
            <param name="innerStream">The stream for informational messages.</param>
            <param name="warnStream">The stream for warning messages.</param>
            <param name="errorStream">The stream for error messages.</param>
        </member>
        <member name="M:Quantum.DebugLogStream.Log(Quantum.ILogSource,System.String)">
            <summary>Logs a message with a source to the InfoStream.</summary>
        </member>
        <member name="M:Quantum.DebugLogStream.Log(System.String)">
            <summary>Logs a message to the InfoStream.</summary>
        </member>
        <member name="M:Quantum.DebugLogStream.Info(Quantum.ILogSource,System.String)">
            <summary>Logs an info message with a source to the InfoStream.</summary>
        </member>
        <member name="M:Quantum.DebugLogStream.Info(System.String)">
            <summary>Logs an info message to the InfoStream.</summary>
        </member>
        <member name="M:Quantum.DebugLogStream.Error(Quantum.ILogSource,System.String)">
            <summary>Logs an error message with a source to the ErrorStream.</summary>
        </member>
        <member name="M:Quantum.DebugLogStream.Error(System.String)">
            <summary>Logs an error message to the ErrorStream.</summary>
        </member>
        <member name="M:Quantum.DebugLogStream.Error(System.Exception)">
            <summary>Logs an exception to the ErrorStream.</summary>
        </member>
        <member name="M:Quantum.DebugLogStream.Exception(System.Exception)">
            <summary>Logs an exception to the ErrorStream.</summary>
        </member>
        <member name="M:Quantum.DebugLogStream.Warn(Quantum.ILogSource,System.String)">
            <summary>Logs a warning message with a source to the WarnStream.</summary>
        </member>
        <member name="M:Quantum.DebugLogStream.Warn(System.String)">
            <summary>Logs a warning message to the WarnStream.</summary>
        </member>
        <member name="M:Quantum.DebugLogStream.If(System.Boolean)">
            <summary>
            Returns self if <paramref name="condition"/> is true.
            </summary>
        </member>
        <member name="M:Quantum.DebugLogStream.Once(System.Boolean@)">
            <summary>
            Returns self if <paramref name="flag"/> is false and then sets it to true.
            </summary>
        </member>
        <member name="M:Quantum.DebugLogStream.Dispose">
            <summary>Disposes the DebugLogStream and its underlying streams.</summary>
        </member>
        <member name="T:Quantum.ILogSource">
            <summary>
            An interface for log sources. Implement this interface to be able to pass a custom context to Log methods.
            </summary>
        </member>
        <member name="T:Quantum.LogType">
            <summary>
            Log type.
            </summary>
        </member>
        <member name="F:Quantum.LogType.Error">
            <summary>
            Error log type.
            </summary>
        </member>
        <member name="F:Quantum.LogType.Warn">
            <summary>
            Warning log type.
            </summary>
        </member>
        <member name="F:Quantum.LogType.Info">
            <summary>
            Information log type.
            </summary>
        </member>
        <member name="F:Quantum.LogType.Debug">
            <summary>
            Debug log type.
            </summary>
        </member>
        <member name="F:Quantum.LogType.Trace">
            <summary>
            Trace log type.
            </summary>
        </member>
        <member name="T:Quantum.LogFlags">
            <summary>
            Flags for logging.
            </summary>
        </member>
        <member name="F:Quantum.LogFlags.Debug">
            <summary>
            This is a debug stream.
            </summary>
        </member>
        <member name="F:Quantum.LogFlags.Trace">
            <summary>
            This is a trace stream.
            </summary>
        </member>
        <member name="T:Quantum.LogLevel">
            <summary>
            The log level. Messages with a lower level than the current LogLevel will be ignored.
            </summary>
        </member>
        <member name="F:Quantum.LogLevel.Debug">
            <summary>
            Debug messages. Dlls will only output Debug messages if compiled with DEBUG symbol.
            </summary>
        </member>
        <member name="F:Quantum.LogLevel.Info">
            <summary>
            General info messages.
            </summary>
        </member>
        <member name="F:Quantum.LogLevel.Warn">
            <summary>
            Warning messages.
            </summary>
        </member>
        <member name="F:Quantum.LogLevel.Error">
            <summary>
            Error messages.
            </summary>
        </member>
        <member name="F:Quantum.LogLevel.None">
            <summary>
            No messages will be output.
            </summary>
        </member>
        <member name="T:Quantum.LogLevelExtensions">
            <summary>
            Extensions for <see cref="T:Quantum.LogLevel"/> 
            </summary>
        </member>
        <member name="M:Quantum.LogLevelExtensions.GetDefine(Quantum.LogLevel)">
            <summary>
            Returns a define used for a given log level.
            </summary>
        </member>
        <member name="T:Quantum.LogSettings">
            <summary>
            Settings for the logging system.
            </summary>
        </member>
        <member name="F:Quantum.LogSettings.Level">
            <summary>
            The minimum log level to output.
            </summary>
        </member>
        <member name="F:Quantum.LogSettings.TraceChannels">
            <summary>
            Mask of log channels to output.
            </summary>
        </member>
        <member name="M:Quantum.LogSettings.#ctor(Quantum.LogLevel,Quantum.TraceChannels)">
            <summary>
            Creates a new instance of LogSettings.
            </summary>
        </member>
        <member name="T:Quantum.LogStream">
            <summary>
            Interface for logging streams.
            </summary>
        </member>
        <member name="M:Quantum.LogStream.Log(Quantum.ILogSource,System.String)">
            <summary>
            Logs a message with a source.
            </summary>
            <param name="source">The source of the log message.</param>
            <param name="message">The log message.</param>
        </member>
        <member name="M:Quantum.LogStream.Log(System.String)">
            <summary>
            Logs a message.
            </summary>
            <param name="message">The log message.</param>
        </member>
        <member name="M:Quantum.LogStream.Log(Quantum.ILogSource,System.String,System.Exception)">
            <summary>
            Logs a message with a source and an exception.
            </summary>
            <param name="source">The source of the log message.</param>
            <param name="message">The log message.</param>
            <param name="error">The exception to log.</param>
        </member>
        <member name="M:Quantum.LogStream.Log(Quantum.ILogSource,System.Exception)">
            <summary>
            Logs a message with an exception.
            </summary>
            <param name="source">The source of the log message.</param>
            <param name="error">The exception to log.</param>
        </member>
        <member name="M:Quantum.LogStream.Log(System.String,System.Exception)">
            <summary>
            Logs a message with an exception.
            </summary>
            <param name="message">The log message.</param>
            <param name="error">The exception to log.</param>
        </member>
        <member name="M:Quantum.LogStream.Log(System.Exception)">
            <summary>
            Logs an exception.
            </summary>
            <param name="error">The exception to log.</param>
        </member>
        <member name="M:Quantum.LogStream.If(System.Boolean)">
            <summary>
            Returns self if <paramref name="condition"/> is true.
            </summary>
        </member>
        <member name="M:Quantum.LogStream.Once(System.Boolean@)">
            <summary>
            Returns self if <paramref name="flag"/> is false and then sets it to true.
            </summary>
        </member>
        <member name="M:Quantum.LogStream.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Quantum.TextWriterLogStream">
            <summary>
            A log stream that writes log messages to a <see cref="T:System.IO.TextWriter"/>.
            </summary>
        </member>
        <member name="M:Quantum.TextWriterLogStream.#ctor(System.IO.TextWriter,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Quantum.TextWriterLogStream"/> class.
            </summary>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> to write log messages to.</param>
            <param name="disposeWriter">If set to <c>true</c>, the writer will be disposed when this instance is disposed.</param>
            <param name="prefix">An optional prefix to prepend to each log message.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="writer"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Quantum.TextWriterLogStream.Log(Quantum.ILogSource,System.String)">
            <summary>
            Logs a message with a source.
            </summary>
            <param name="source">The source of the log message.</param>
            <param name="message">The log message.</param>
        </member>
        <member name="M:Quantum.TextWriterLogStream.Log(System.String)">
            <summary>
            Logs a message.
            </summary>
            <param name="message">The log message.</param>
        </member>
        <member name="M:Quantum.TextWriterLogStream.Log(Quantum.ILogSource,System.String,System.Exception)">
            <summary>
            Logs a message with a source and an exception.
            </summary>
            <param name="source">The source of the log message.</param>
            <param name="message">The log message.</param>
            <param name="error">The exception to log.</param>
        </member>
        <member name="M:Quantum.TextWriterLogStream.Log(System.String,System.Exception)">
            <summary>
            Logs a message with an exception.
            </summary>
            <param name="message">The log message.</param>
            <param name="error">The exception to log.</param>
        </member>
        <member name="M:Quantum.TextWriterLogStream.Log(System.Exception)">
            <summary>
            Logs an exception.
            </summary>
            <param name="error">The exception to log.</param>
        </member>
        <member name="M:Quantum.TextWriterLogStream.Dispose">
            <summary>
            Disposes the <see cref="T:Quantum.TextWriterLogStream"/> instance and optionally disposes the underlying <see cref="T:System.IO.TextWriter"/>.
            </summary>
        </member>
        <member name="T:Quantum.TraceLogStream">
            <summary>
            Represents a trace log stream that supports logging to different streams.
            </summary>
        </member>
        <member name="F:Quantum.TraceLogStream.InfoStream">
            <summary>Stream for logging informational messages.</summary>
        </member>
        <member name="F:Quantum.TraceLogStream.WarnStream">
            <summary>Stream for logging warning messages.</summary>
        </member>
        <member name="F:Quantum.TraceLogStream.ErrorStream">
            <summary>Stream for logging error messages.</summary>
        </member>
        <member name="M:Quantum.TraceLogStream.#ctor(Quantum.LogStream,Quantum.LogStream,Quantum.LogStream)">
            <summary>
            Initializes a new instance of the TraceLogStream class.
            </summary>
            <param name="innerStream">The stream for informational messages.</param>
            <param name="warnStream">The stream for warning messages.</param>
            <param name="errorStream">The stream for error messages.</param>
        </member>
        <member name="M:Quantum.TraceLogStream.Log(Quantum.ILogSource,System.String)">
            <summary>Logs a message with a source to the InfoStream.</summary>
        </member>
        <member name="M:Quantum.TraceLogStream.Log(System.String)">
            <summary>Logs a message to the InfoStream.</summary>
        </member>
        <member name="M:Quantum.TraceLogStream.Info(Quantum.ILogSource,System.String)">
            <summary>Logs an info message with a source to the InfoStream.</summary>
        </member>
        <member name="M:Quantum.TraceLogStream.Info(System.String)">
            <summary>Logs an info message to the InfoStream.</summary>
        </member>
        <member name="M:Quantum.TraceLogStream.Error(Quantum.ILogSource,System.String)">
            <summary>Logs an error message with a source to the ErrorStream.</summary>
        </member>
        <member name="M:Quantum.TraceLogStream.Error(System.String)">
            <summary>Logs an error message to the ErrorStream.</summary>
        </member>
        <member name="M:Quantum.TraceLogStream.Error(System.Exception)">
            <summary>Logs an exception to the ErrorStream.</summary>
        </member>
        <member name="M:Quantum.TraceLogStream.Exception(System.Exception)">
            <summary>Logs an exception to the ErrorStream.</summary>
        </member>
        <member name="M:Quantum.TraceLogStream.Warn(Quantum.ILogSource,System.String)">
            <summary>Logs a warning message with a source to the WarnStream.</summary>
        </member>
        <member name="M:Quantum.TraceLogStream.Warn(System.String)">
            <summary>Logs a warning message to the WarnStream.</summary>
        </member>
        <member name="M:Quantum.TraceLogStream.If(System.Boolean)">
            <summary>
            Returns self if <paramref name="condition"/> is true.
            </summary>
        </member>
        <member name="M:Quantum.TraceLogStream.Once(System.Boolean@)">
            <summary>
            Returns self if <paramref name="flag"/> is false and then sets it to true.
            </summary>
        </member>
        <member name="M:Quantum.TraceLogStream.Dispose">
            <summary>Disposes the TraceLogStream and its underlying streams.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with a field or property member.</summary>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>Initializes the attribute with the list of field and property members.</summary>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values when returning with the specified return value condition.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>Initializes the attribute with the specified return value condition and a field or property member.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>Initializes the attribute with the specified return value condition and list of field and property members.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
    </members>
</doc>
